{"version":3,"sources":["firebase.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","Main","state","user","loggedIn","componentWillReceiveProps","prop","_this","setState","authenticated","classes","this","props","react_default","a","createElement","className","container","Component","withStyles","display","App","login","signInWithPopup","then","result","logout","signOut","componentDidMount","onAuthStateChanged","AppBar_default","position","color","Toolbar_default","Typography_default","variant","noValidate","autoComplete","Button_default","button","onClick","components_Main","theme","margin","flexDirection","spacing","unit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAWAA,IAASC,cATM,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAIhB,IAAMC,EAAW,IAAIR,IAASS,KAAKC,mBAC7BD,EAAOT,IAASS,OCHvBE,GDISX,EAAf,mNCFIY,MAAQ,CACJC,KAAM,KACNC,UAAU,KAGdC,0BAA4B,SAACC,GACzBC,EAAKC,SAAS,CACVJ,SAAUE,EAAKG,yFAId,IACGC,EAAYC,KAAKC,MAAjBF,QAER,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQO,WACnBN,KAAKT,MAAME,SACRS,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,4CArBGG,cAgCJC,uBAtCA,iBAAO,CAClBF,UAAW,CACPG,QAAS,UAoCFD,CAAmBlB,GCpB5BoB,6MAEFnB,MAAQ,CACJC,KAAM,KACNM,eAAe,KAGnBa,MAAQ,WACJvB,EAAKwB,gBAAgBzB,GAChB0B,KAAK,SAACC,GACHlB,EAAKC,SAAS,CACVL,KAAMsB,EAAOtB,KACbM,eAAe,SAK/BiB,OAAS,WACL3B,EAAK4B,UACAH,KAAK,WACFjB,EAAKC,SAAS,CACVL,KAAM,KACNM,eAAe,SAK/BmB,kBAAoB,WAChB7B,EAAK8B,mBAAmB,SAAC1B,GACjBA,GACAI,EAAKC,SAAS,CAAEL,OAAMM,eAAe,+EAKpC,IACGC,EAAYC,KAAKC,MAAjBF,QACR,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAQiB,SAAS,SAASC,MAAM,WAC5BnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,KACID,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYqB,QAAQ,KAAKH,MAAM,WAA/B,aACAnB,EAAAC,EAAAC,cAAA,QAAMC,UAAWN,EAAQO,UAAWmB,YAAU,EAACC,aAAa,OACvD1B,KAAKT,MAAMC,KAAOU,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAQqB,QAAQ,WAAWnB,UAAWN,EAAQ6B,OAAQC,QAAS7B,KAAKe,QAApE,WAA+Fb,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAQqB,QAAQ,WAAWnB,UAAWN,EAAQ6B,OAAQC,QAAS7B,KAAKW,OAApE,aAI9HT,EAAAC,EAAAC,cAAC0B,EAAD,CAAMhC,cAAeE,KAAKT,MAAMO,wBA/ClCS,aAyDCC,uBApEJ,SAAAuB,GAAK,MAAK,CACrBzB,UAAW,CACP0B,OAAQ,aACRvB,QAAS,OACTwB,cAAe,OAEnBL,OAAQ,CACJI,OAAQD,EAAMG,QAAQC,QA6DX3B,CAAmBE,GCnElB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.8e15954d.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst config = {\n    apiKey: 'AIzaSyDcyfdg5qzoEbM-9v7Q6WwpGJQIZqfQQRU',\n    authDomain: 'user-feed-84a20.firebaseapp.com',\n    databaseURL: 'https://user-feed-84a20.firebaseio.com',\n    projectId: 'user-feed-84a20',\n    storageBucket: 'user-feed-84a20.appspot.com',\n    messagingSenderId: '969646773326'\n}\n\nfirebase.initializeApp(config)\nexport const provider = new firebase.auth.GoogleAuthProvider()\nexport const auth = firebase.auth()\nexport default firebase","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = () => ({\n    container: {\n        display: 'flex'\n    }\n})\n\nclass Main extends Component {\n\n    state = {\n        user: null,\n        loggedIn: false\n    }\n\n    componentWillReceiveProps = (prop) => {\n        this.setState({\n            loggedIn: prop.authenticated\n        })\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <div className={classes.container}>\n                {this.state.loggedIn ? \n                    <p>Logged In</p> \n                : \n                <p>Ope, nothin to see here</p>\n                }\n            </div>\n        )\n    }\n}\n\nMain.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(Main)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { auth, provider } from './firebase'\nimport './App.css'\nimport Main from './components/Main'\n\nconst styles = theme => ({\n    container: {\n        margin: '0 0 0 auto',\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    button: {\n        margin: theme.spacing.unit,\n    }\n})\n\nclass App extends Component {\n\n    state = {\n        user: null,\n        authenticated: false\n    }\n\n    login = () => {\n        auth.signInWithPopup(provider)\n            .then((result) => {\n                this.setState({\n                    user: result.user,\n                    authenticated: true\n                })\n            })\n    }\n\n    logout = () => {\n        auth.signOut()\n            .then(() => {\n                this.setState({\n                    user: null,\n                    authenticated: false\n                })\n            })\n    }\n\n    componentDidMount = () => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({ user, authenticated: true })\n            }\n        })\n    }\n\n        render() {\n            const { classes } = this.props\n            return (\n                <div className='app'>\n                    <AppBar position=\"static\" color=\"default\">\n                        <Toolbar>\n                            <Typography variant=\"h6\" color=\"inherit\">App Title</Typography>\n                            <form className={classes.container} noValidate autoComplete='off'>\n                                {this.state.user ? <Button variant=\"outlined\" className={classes.button} onClick={this.logout}>Log Out</Button> : <Button variant=\"outlined\" className={classes.button} onClick={this.login}>Log In</Button>}\n                            </form>\n                        </Toolbar>\n                    </AppBar>\n                    <Main authenticated={this.state.authenticated} />\n                </div>\n            )\n        }\n    }\n\n    App.propTypes = {\n        classes: PropTypes.object.isRequired\n    }\n\n    export default withStyles(styles)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}