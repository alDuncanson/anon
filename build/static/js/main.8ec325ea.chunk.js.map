{"version":3,"sources":["firebase.js","components/MessageFeed.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","MessageFeed","like","key","index","numOfLikes","newLikes","database","ref","concat","update","likes","state","posts","_this2","this","on","snapshot","val","newState","post","unshift","id","setState","_this3","classes","props","react_default","a","createElement","List_default","className","list","map","Paper_default","paper","elevation","ListItem_default","listItem","ListItemText_default","primary","ThumbUp_default","likeButton","onClick","Component","withStyles","width","height","margin","display","flexDirection","justifyContent","padding","overflowX","boxShadow","borderRadius","&:hover","cursor","&:active","marginLeft","Main","user","loggedIn","componentWillReceiveProps","prop","_this","authenticated","handleChange","event","target","value","handleSubmit","push","container","Grid_default","item","xs","postContainer","Typography_default","variant","gutterBottom","welcome","displayName","Avatar_default","alt","src","photoURL","avatar","TextField_default","label","multiline","rowsMax","postField","onChange","Button_default","postButton","components_MessageFeed","center","theme","alignItems","borderRight","position","textAlign","App","login","signInWithPopup","then","result","app","orderByChild","equalTo","email","limitToFirst","once","usersRef","username","logout","signOut","componentDidMount","onAuthStateChanged","AppBar_default","color","Toolbar_default","noValidate","autoComplete","button","components_Main","spacing","unit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec325ea.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst config = {\n    apiKey: 'AIzaSyDcyfdg5qzoEbM-9v7Q6WwpGJQIZqfQQRU',\n    authDomain: 'user-feed-84a20.firebaseapp.com',\n    databaseURL: 'https://user-feed-84a20.firebaseio.com',\n    projectId: 'user-feed-84a20',\n    storageBucket: 'user-feed-84a20.appspot.com',\n    messagingSenderId: '969646773326'\n}\n\nfirebase.initializeApp(config)\nexport const provider = new firebase.auth.GoogleAuthProvider()\nexport const auth = firebase.auth()\nexport default firebase","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport firebase from '../firebase'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Paper from '@material-ui/core/Paper'\nimport Like from '@material-ui/icons/ThumbUp';\n\nconst styles = () => ({\n    list: {\n        width: '100%',\n        height: '100%',\n        margin: '0 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n    paper: {\n        width: '80%',\n        padding: '21px',\n        margin: '21px auto 21px 0'\n    },\n    listItem: {\n        overflowX: 'hidden'\n    },\n    likeButton: {\n        boxShadow: '2px 2px 2px #c5c5c5',\n        borderRadius: '3px',\n        padding: '5px',\n        \n        '&:hover': {\n            boxShadow: '3px 3px 3px #c5c5c5',\n            cursor: 'pointer'\n        },\n\n        '&:active': {\n            boxShadow: '1px 1px 1px #c5c5c5'\n        }\n    },\n    likes: {\n        marginLeft: '13px'\n    }\n})\n\nclass MessageFeed extends Component {\n\n    componentDidMount() {\n        const postRef = firebase.database().ref('posts')\n\n        postRef.on('value', (snapshot) => {\n            let posts = snapshot.val()\n            let newState = []\n\n            for (let post in posts) {\n                newState.unshift({\n                    post: posts[post].post,\n                    id: post,\n                    likes: posts[post].likes\n                })\n            }\n            this.setState({\n                posts: newState\n            })\n        })\n    }\n\n    like = (key, index, numOfLikes) => {\n        let newLikes = numOfLikes + 1\n\n        firebase.database().ref(`posts/${key}`).update({ likes: newLikes })\n    }\n\n    state = {\n        posts: []\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <List className={classes.list}>\n                { \n                    this.state.posts.map((post, index) => {\n                        return (\n                            <Paper key={post.id} className={classes.paper} elevation={1}>\n                                <ListItem className={classes.listItem}>\n                                    <ListItemText primary={`${post.post}`}/>\n                                    <Like className={classes.likeButton} onClick={() => this.like(post.id, index, post.likes)}/>\n                                    <p className={classes.likes}>{post.likes}</p>\n                                </ListItem>\n                            </Paper>\n                        )\n                    })\n                }\n            </List>\n        )\n    }\n}\n\nMessageFeed.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(MessageFeed)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Avatar from '@material-ui/core/Avatar'\nimport MessageFeed from './MessageFeed'\nimport firebase from '../firebase'\n\nconst styles = (theme) => ({\n    container: {\n        display: 'flex',\n        height: 'calc(100% - 64px)',\n        overflowX: 'hidden'\n    },\n    center: {\n        display: 'flex',\n        height: 'calc(100% - 64px)',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%'\n    },\n    avatar: {\n        width: 120,\n        height: 120,\n        margin: '16px auto 0 auto',\n    },\n    postContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '21px',\n        height: 'calc(100% - 42px)',\n        borderRight: '1px solid #c5c5c5',\n        position: 'fixed'\n    },\n    welcome: {\n        width: '85%',\n        margin: '0 auto',\n        textAlign: 'center'\n    },\n    postField: {\n        width: '70%',\n        margin: '16px auto'\n    },\n    postButton: {\n        width: '70%',\n        margin: '0 auto'\n    }\n})\n\nclass Main extends Component {\n\n    state = {\n        user: null,\n        loggedIn: false,\n        post: ''\n    }\n\n    componentWillReceiveProps = (prop) => {\n        this.setState({\n            loggedIn: prop.authenticated,\n            user: prop.user\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({post: event.target.value})\n    }\n\n    handleSubmit = () => {\n        const posts = firebase.database().ref('posts')\n        const post = {\n            post: this.state.post,\n            likes: 0\n        }\n\n        this.setState({\n            post: ''\n        })\n\n        posts.push(post)\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <div className={classes.container}>\n                {this.state.loggedIn ?\n                    <Grid container>\n                        <Grid item xs={4}>\n                            <div className={classes.postContainer}>\n                                <Typography variant='h6' gutterBottom className={classes.welcome}>Welcome, {this.state.user.displayName}</Typography>\n                                <Avatar alt='Profile Photo' src={this.state.user.photoURL} className={classes.avatar} />\n                                <TextField id='post-field' label=\"What's on your mind\" multiline rowsMax='4' className={classes.postField} margin='normal' value={this.state.post} onChange={this.handleChange}/>\n                                <Button id='post-button' variant='outlined' className={classes.postButton} onClick={this.handleSubmit}>Post</Button>\n                            </div>\n                        </Grid>\n                        <Grid item xs={8}>\n                            <MessageFeed/>\n                        </Grid>\n                    </Grid>\n                    :\n                    <div className={classes.center}>\n                        <Typography variant='h6' gutterBottom>Ope, nothing to see here</Typography>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nMain.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(Main)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { auth, provider } from './firebase'\nimport './App.css'\nimport Main from './components/Main'\nimport firebase from './firebase'\n\nconst styles = theme => ({\n    container: {\n        margin: '0 0 0 auto',\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    button: {\n        margin: theme.spacing.unit,\n    }\n})\n\nclass App extends Component {\n\n    state = {\n        user: null,\n        authenticated: false\n    }\n\n    login = () => {\n        auth.signInWithPopup(provider)\n            .then((result) => {\n                this.setState({\n                    user: result.user,\n                    authenticated: true\n                })\n\n                firebase.app().database().ref('users').orderByChild('email').equalTo(result.user.email).limitToFirst(1).once('value', snapshot => {\n                    const userEmail = snapshot.val()\n\n                    if (userEmail == null) {\n                        const usersRef = firebase.database().ref('users')\n\n                        const user = {\n                            username: this.state.user.displayName,\n                            email: this.state.user.email\n                        }\n                        usersRef.push(user)\n                    }\n                })\n            })\n    }\n\n    logout = () => {\n        auth.signOut()\n            .then(() => {\n                this.setState({\n                    user: null,\n                    authenticated: false\n                })\n            })\n    }\n\n    componentDidMount = () => {\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({ user, authenticated: true })\n            }\n        })\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <div className='app'>\n                <AppBar position='static' color='default' elevation={2}>\n                    <Toolbar>\n                        <Typography variant='h6' color='inherit'>anon.io</Typography>\n                        <form className={classes.container} noValidate autoComplete='off'>\n                            {this.state.user ? <Button variant='outlined' className={classes.button} onClick={this.logout}>Log Out</Button> : <Button variant='outlined' className={classes.button} onClick={this.login}>Log In</Button>}\n                        </form>\n                    </Toolbar>\n                </AppBar>\n                <Main authenticated={this.state.authenticated} user={this.state.user} />\n            </div>\n        )\n    }\n}\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'typeface-roboto'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}